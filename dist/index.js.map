{"version":3,"file":"index.js","sources":["../src/hooks/useFetch/index.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nexport type FetchStatus = 'uninitialized' | 'fetching' | 'success' | 'error';\n\n/**\n * \n * @param query : any async function\n * @returns \n * status: the status of the query\n * res: the result\n * invalidate: a function to invalidate the current res and refetch\n */\nexport const useFetch = <T>(\n\tquery: () => Promise<T>\n): { status: FetchStatus; res: T | undefined; invalidate: () => void } => {\n\tconst [status, setStatus] = useState<FetchStatus>('uninitialized');\n\tconst [res, setRes] = useState<T | undefined>();\n\n\tconst invalidate = () => {\n\t\tsetStatus('uninitialized');\n\t\tsetRes(undefined);\n\t};\n\tconst executeQuery = useCallback(async () => {\n\t\tif (res || status === 'error' || status === 'fetching') {\n\t\t\treturn;\n\t\t}\n\t\tif (status === 'uninitialized') {\n\t\t\tsetStatus('fetching');\n\t\t}\n\t\tawait query()\n\t\t\t.then((queryResult) => {\n\t\t\t\tsetRes(queryResult);\n\t\t\t\tsetStatus('success');\n\t\t\t})\n\t\t\t.catch(() => setStatus('error'));\n\t}, [query, res, status]);\n\n\tuseEffect(() => {\n\t\texecuteQuery();\n\t}, [executeQuery]);\n\n\treturn { status, res, invalidate };\n};"],"names":["useFetch","query","_a","useState","status","setStatus","_b","res","setRes","executeQuery","useCallback","then","queryResult","catch","useEffect","invalidate","undefined"],"mappings":"wkDAYaA,SAAW,SACvBC,GAEM,IAAAC,EAAsBC,eAAsB,iBAA3CC,OAAQC,OACTC,EAAgBH,iBAAfI,OAAKC,OAMNC,EAAeC,kBAAY,uHAChC,OAAIH,GAAkB,UAAXH,GAAiC,aAAXA,OAGlB,kBAAXA,GACHC,EAAU,eAELJ,IACJU,KAAK,SAACC,GACNJ,EAAOI,GACPP,EAAU,aAEVQ,MAAM,WAAM,OAAAR,EAAU,2BALxBH,mBAME,CAACD,EAAOM,EAAKH,IAMhB,OAJAU,gBAAU,WACTL,KACE,CAACA,IAEG,CAAEL,SAAQG,MAAKQ,WAvBH,WAClBV,EAAU,iBACVG,OAAOQ"}